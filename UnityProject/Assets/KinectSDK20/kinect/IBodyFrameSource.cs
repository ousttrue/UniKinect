// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace KinectSDK20 {
    public class IBodyFrameSource: IUnknown
    {
        static Guid s_uuid = new Guid("bb94a78a-458c-4608-ac69-34fead1e3bae");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int SubscribeFrameCaptured(
            out long waitableHandle
        ){
            var fp = GetFunctionPointer(3);
            if(m_SubscribeFrameCapturedFunc==null) m_SubscribeFrameCapturedFunc = (SubscribeFrameCapturedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SubscribeFrameCapturedFunc));
            
            return m_SubscribeFrameCapturedFunc(m_ptr, out waitableHandle);
        }
        delegate int SubscribeFrameCapturedFunc(IntPtr self, out long waitableHandle);
        SubscribeFrameCapturedFunc m_SubscribeFrameCapturedFunc;

        public virtual int UnsubscribeFrameCaptured(
            long waitableHandle
        ){
            var fp = GetFunctionPointer(4);
            if(m_UnsubscribeFrameCapturedFunc==null) m_UnsubscribeFrameCapturedFunc = (UnsubscribeFrameCapturedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnsubscribeFrameCapturedFunc));
            
            return m_UnsubscribeFrameCapturedFunc(m_ptr, waitableHandle);
        }
        delegate int UnsubscribeFrameCapturedFunc(IntPtr self, long waitableHandle);
        UnsubscribeFrameCapturedFunc m_UnsubscribeFrameCapturedFunc;

        public virtual int GetFrameCapturedEventData(
            long waitableHandle,
            out IFrameCapturedEventArgs eventData
        ){
            var fp = GetFunctionPointer(5);
            if(m_GetFrameCapturedEventDataFunc==null) m_GetFrameCapturedEventDataFunc = (GetFrameCapturedEventDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFrameCapturedEventDataFunc));
            eventData = new IFrameCapturedEventArgs();
            return m_GetFrameCapturedEventDataFunc(m_ptr, waitableHandle, out eventData.PtrForNew);
        }
        delegate int GetFrameCapturedEventDataFunc(IntPtr self, long waitableHandle, out IntPtr eventData);
        GetFrameCapturedEventDataFunc m_GetFrameCapturedEventDataFunc;

        public virtual int get_IsActive(
            out byte isActive
        ){
            var fp = GetFunctionPointer(6);
            if(m_get_IsActiveFunc==null) m_get_IsActiveFunc = (get_IsActiveFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_IsActiveFunc));
            
            return m_get_IsActiveFunc(m_ptr, out isActive);
        }
        delegate int get_IsActiveFunc(IntPtr self, out byte isActive);
        get_IsActiveFunc m_get_IsActiveFunc;

        public virtual int get_BodyCount(
            out int bodyCount
        ){
            var fp = GetFunctionPointer(7);
            if(m_get_BodyCountFunc==null) m_get_BodyCountFunc = (get_BodyCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_BodyCountFunc));
            
            return m_get_BodyCountFunc(m_ptr, out bodyCount);
        }
        delegate int get_BodyCountFunc(IntPtr self, out int bodyCount);
        get_BodyCountFunc m_get_BodyCountFunc;

        public virtual int OpenReader(
            out IBodyFrameReader reader
        ){
            var fp = GetFunctionPointer(8);
            if(m_OpenReaderFunc==null) m_OpenReaderFunc = (OpenReaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OpenReaderFunc));
            reader = new IBodyFrameReader();
            return m_OpenReaderFunc(m_ptr, out reader.PtrForNew);
        }
        delegate int OpenReaderFunc(IntPtr self, out IntPtr reader);
        OpenReaderFunc m_OpenReaderFunc;

        public virtual int get_KinectSensor(
            out IKinectSensor sensor
        ){
            var fp = GetFunctionPointer(9);
            if(m_get_KinectSensorFunc==null) m_get_KinectSensorFunc = (get_KinectSensorFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_KinectSensorFunc));
            sensor = new IKinectSensor();
            return m_get_KinectSensorFunc(m_ptr, out sensor.PtrForNew);
        }
        delegate int get_KinectSensorFunc(IntPtr self, out IntPtr sensor);
        get_KinectSensorFunc m_get_KinectSensorFunc;

        public virtual int OverrideHandTracking(
            ulong trackingId
        ){
            var fp = GetFunctionPointer(10);
            if(m_OverrideHandTrackingFunc==null) m_OverrideHandTrackingFunc = (OverrideHandTrackingFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OverrideHandTrackingFunc));
            
            return m_OverrideHandTrackingFunc(m_ptr, trackingId);
        }
        delegate int OverrideHandTrackingFunc(IntPtr self, ulong trackingId);
        OverrideHandTrackingFunc m_OverrideHandTrackingFunc;

        public virtual int OverrideAndReplaceHandTracking(
            ulong oldTrackingId,
            ulong newTrackingId
        ){
            var fp = GetFunctionPointer(11);
            if(m_OverrideAndReplaceHandTrackingFunc==null) m_OverrideAndReplaceHandTrackingFunc = (OverrideAndReplaceHandTrackingFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OverrideAndReplaceHandTrackingFunc));
            
            return m_OverrideAndReplaceHandTrackingFunc(m_ptr, oldTrackingId, newTrackingId);
        }
        delegate int OverrideAndReplaceHandTrackingFunc(IntPtr self, ulong oldTrackingId, ulong newTrackingId);
        OverrideAndReplaceHandTrackingFunc m_OverrideAndReplaceHandTrackingFunc;

    }
}
