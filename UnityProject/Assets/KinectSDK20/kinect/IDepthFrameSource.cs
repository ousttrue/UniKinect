// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace KinectSDK20 {
    public class IDepthFrameSource: IUnknown
    {
        static Guid s_uuid = new Guid("c428d558-5e46-490a-b699-d1dddaa24150");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int SubscribeFrameCaptured(
            out long waitableHandle
        ){
            var fp = GetFunctionPointer(3);
            if(m_SubscribeFrameCapturedFunc==null) m_SubscribeFrameCapturedFunc = (SubscribeFrameCapturedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SubscribeFrameCapturedFunc));
            
            return m_SubscribeFrameCapturedFunc(m_ptr, out waitableHandle);
        }
        delegate int SubscribeFrameCapturedFunc(IntPtr self, out long waitableHandle);
        SubscribeFrameCapturedFunc m_SubscribeFrameCapturedFunc;

        public virtual int UnsubscribeFrameCaptured(
            long waitableHandle
        ){
            var fp = GetFunctionPointer(4);
            if(m_UnsubscribeFrameCapturedFunc==null) m_UnsubscribeFrameCapturedFunc = (UnsubscribeFrameCapturedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnsubscribeFrameCapturedFunc));
            
            return m_UnsubscribeFrameCapturedFunc(m_ptr, waitableHandle);
        }
        delegate int UnsubscribeFrameCapturedFunc(IntPtr self, long waitableHandle);
        UnsubscribeFrameCapturedFunc m_UnsubscribeFrameCapturedFunc;

        public virtual int GetFrameCapturedEventData(
            long waitableHandle,
            out IFrameCapturedEventArgs eventData
        ){
            var fp = GetFunctionPointer(5);
            if(m_GetFrameCapturedEventDataFunc==null) m_GetFrameCapturedEventDataFunc = (GetFrameCapturedEventDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFrameCapturedEventDataFunc));
            eventData = new IFrameCapturedEventArgs();
            return m_GetFrameCapturedEventDataFunc(m_ptr, waitableHandle, out eventData.PtrForNew);
        }
        delegate int GetFrameCapturedEventDataFunc(IntPtr self, long waitableHandle, out IntPtr eventData);
        GetFrameCapturedEventDataFunc m_GetFrameCapturedEventDataFunc;

        public virtual int get_IsActive(
            out byte isActive
        ){
            var fp = GetFunctionPointer(6);
            if(m_get_IsActiveFunc==null) m_get_IsActiveFunc = (get_IsActiveFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_IsActiveFunc));
            
            return m_get_IsActiveFunc(m_ptr, out isActive);
        }
        delegate int get_IsActiveFunc(IntPtr self, out byte isActive);
        get_IsActiveFunc m_get_IsActiveFunc;

        public virtual int OpenReader(
            out IDepthFrameReader reader
        ){
            var fp = GetFunctionPointer(7);
            if(m_OpenReaderFunc==null) m_OpenReaderFunc = (OpenReaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OpenReaderFunc));
            reader = new IDepthFrameReader();
            return m_OpenReaderFunc(m_ptr, out reader.PtrForNew);
        }
        delegate int OpenReaderFunc(IntPtr self, out IntPtr reader);
        OpenReaderFunc m_OpenReaderFunc;

        public virtual int get_DepthMinReliableDistance(
            out ushort depthMinReliableDistance
        ){
            var fp = GetFunctionPointer(8);
            if(m_get_DepthMinReliableDistanceFunc==null) m_get_DepthMinReliableDistanceFunc = (get_DepthMinReliableDistanceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_DepthMinReliableDistanceFunc));
            
            return m_get_DepthMinReliableDistanceFunc(m_ptr, out depthMinReliableDistance);
        }
        delegate int get_DepthMinReliableDistanceFunc(IntPtr self, out ushort depthMinReliableDistance);
        get_DepthMinReliableDistanceFunc m_get_DepthMinReliableDistanceFunc;

        public virtual int get_DepthMaxReliableDistance(
            out ushort depthMaxReliableDistance
        ){
            var fp = GetFunctionPointer(9);
            if(m_get_DepthMaxReliableDistanceFunc==null) m_get_DepthMaxReliableDistanceFunc = (get_DepthMaxReliableDistanceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_DepthMaxReliableDistanceFunc));
            
            return m_get_DepthMaxReliableDistanceFunc(m_ptr, out depthMaxReliableDistance);
        }
        delegate int get_DepthMaxReliableDistanceFunc(IntPtr self, out ushort depthMaxReliableDistance);
        get_DepthMaxReliableDistanceFunc m_get_DepthMaxReliableDistanceFunc;

        public virtual int get_FrameDescription(
            out IFrameDescription frameDescription
        ){
            var fp = GetFunctionPointer(10);
            if(m_get_FrameDescriptionFunc==null) m_get_FrameDescriptionFunc = (get_FrameDescriptionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_FrameDescriptionFunc));
            frameDescription = new IFrameDescription();
            return m_get_FrameDescriptionFunc(m_ptr, out frameDescription.PtrForNew);
        }
        delegate int get_FrameDescriptionFunc(IntPtr self, out IntPtr frameDescription);
        get_FrameDescriptionFunc m_get_FrameDescriptionFunc;

        public virtual int get_KinectSensor(
            out IKinectSensor sensor
        ){
            var fp = GetFunctionPointer(11);
            if(m_get_KinectSensorFunc==null) m_get_KinectSensorFunc = (get_KinectSensorFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_KinectSensorFunc));
            sensor = new IKinectSensor();
            return m_get_KinectSensorFunc(m_ptr, out sensor.PtrForNew);
        }
        delegate int get_KinectSensorFunc(IntPtr self, out IntPtr sensor);
        get_KinectSensorFunc m_get_KinectSensorFunc;

    }
}
