// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace KinectSDK20 {
    public class IAudioBeam: IUnknown
    {
        static Guid s_uuid = new Guid("f692d23a-14d0-432d-b802-dd381a45a121");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int get_AudioSource(
            out IAudioSource audioSource
        ){
            var fp = GetFunctionPointer(3);
            if(m_get_AudioSourceFunc==null) m_get_AudioSourceFunc = (get_AudioSourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_AudioSourceFunc));
            audioSource = new IAudioSource();
            return m_get_AudioSourceFunc(m_ptr, out audioSource.PtrForNew);
        }
        delegate int get_AudioSourceFunc(IntPtr self, out IntPtr audioSource);
        get_AudioSourceFunc m_get_AudioSourceFunc;

        public virtual int get_AudioBeamMode(
            out _AudioBeamMode audioBeamMode
        ){
            var fp = GetFunctionPointer(4);
            if(m_get_AudioBeamModeFunc==null) m_get_AudioBeamModeFunc = (get_AudioBeamModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_AudioBeamModeFunc));
            
            return m_get_AudioBeamModeFunc(m_ptr, out audioBeamMode);
        }
        delegate int get_AudioBeamModeFunc(IntPtr self, out _AudioBeamMode audioBeamMode);
        get_AudioBeamModeFunc m_get_AudioBeamModeFunc;

        public virtual int put_AudioBeamMode(
            _AudioBeamMode audioBeamMode
        ){
            var fp = GetFunctionPointer(5);
            if(m_put_AudioBeamModeFunc==null) m_put_AudioBeamModeFunc = (put_AudioBeamModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_AudioBeamModeFunc));
            
            return m_put_AudioBeamModeFunc(m_ptr, audioBeamMode);
        }
        delegate int put_AudioBeamModeFunc(IntPtr self, _AudioBeamMode audioBeamMode);
        put_AudioBeamModeFunc m_put_AudioBeamModeFunc;

        public virtual int get_BeamAngle(
            out float beamAngle
        ){
            var fp = GetFunctionPointer(6);
            if(m_get_BeamAngleFunc==null) m_get_BeamAngleFunc = (get_BeamAngleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_BeamAngleFunc));
            
            return m_get_BeamAngleFunc(m_ptr, out beamAngle);
        }
        delegate int get_BeamAngleFunc(IntPtr self, out float beamAngle);
        get_BeamAngleFunc m_get_BeamAngleFunc;

        public virtual int put_BeamAngle(
            float beamAngle
        ){
            var fp = GetFunctionPointer(7);
            if(m_put_BeamAngleFunc==null) m_put_BeamAngleFunc = (put_BeamAngleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_BeamAngleFunc));
            
            return m_put_BeamAngleFunc(m_ptr, beamAngle);
        }
        delegate int put_BeamAngleFunc(IntPtr self, float beamAngle);
        put_BeamAngleFunc m_put_BeamAngleFunc;

        public virtual int get_BeamAngleConfidence(
            out float beamAngleConfidence
        ){
            var fp = GetFunctionPointer(8);
            if(m_get_BeamAngleConfidenceFunc==null) m_get_BeamAngleConfidenceFunc = (get_BeamAngleConfidenceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_BeamAngleConfidenceFunc));
            
            return m_get_BeamAngleConfidenceFunc(m_ptr, out beamAngleConfidence);
        }
        delegate int get_BeamAngleConfidenceFunc(IntPtr self, out float beamAngleConfidence);
        get_BeamAngleConfidenceFunc m_get_BeamAngleConfidenceFunc;

        public virtual int OpenInputStream(
            out IStream stream
        ){
            var fp = GetFunctionPointer(9);
            if(m_OpenInputStreamFunc==null) m_OpenInputStreamFunc = (OpenInputStreamFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OpenInputStreamFunc));
            stream = new IStream();
            return m_OpenInputStreamFunc(m_ptr, out stream.PtrForNew);
        }
        delegate int OpenInputStreamFunc(IntPtr self, out IntPtr stream);
        OpenInputStreamFunc m_OpenInputStreamFunc;

        public virtual int get_RelativeTime(
            out long relativeTime
        ){
            var fp = GetFunctionPointer(10);
            if(m_get_RelativeTimeFunc==null) m_get_RelativeTimeFunc = (get_RelativeTimeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_RelativeTimeFunc));
            
            return m_get_RelativeTimeFunc(m_ptr, out relativeTime);
        }
        delegate int get_RelativeTimeFunc(IntPtr self, out long relativeTime);
        get_RelativeTimeFunc m_get_RelativeTimeFunc;

    }
}
