// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace KinectSDK20 {
    public class IMultiSourceFrameReader: IUnknown
    {
        static Guid s_uuid = new Guid("c0f6432b-9ffe-4ab3-a683-f37c72bbb158");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int SubscribeMultiSourceFrameArrived(
            out long waitableHandle
        ){
            var fp = GetFunctionPointer(3);
            if(m_SubscribeMultiSourceFrameArrivedFunc==null) m_SubscribeMultiSourceFrameArrivedFunc = (SubscribeMultiSourceFrameArrivedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SubscribeMultiSourceFrameArrivedFunc));
            
            return m_SubscribeMultiSourceFrameArrivedFunc(m_ptr, out waitableHandle);
        }
        delegate int SubscribeMultiSourceFrameArrivedFunc(IntPtr self, out long waitableHandle);
        SubscribeMultiSourceFrameArrivedFunc m_SubscribeMultiSourceFrameArrivedFunc;

        public virtual int UnsubscribeMultiSourceFrameArrived(
            long waitableHandle
        ){
            var fp = GetFunctionPointer(4);
            if(m_UnsubscribeMultiSourceFrameArrivedFunc==null) m_UnsubscribeMultiSourceFrameArrivedFunc = (UnsubscribeMultiSourceFrameArrivedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnsubscribeMultiSourceFrameArrivedFunc));
            
            return m_UnsubscribeMultiSourceFrameArrivedFunc(m_ptr, waitableHandle);
        }
        delegate int UnsubscribeMultiSourceFrameArrivedFunc(IntPtr self, long waitableHandle);
        UnsubscribeMultiSourceFrameArrivedFunc m_UnsubscribeMultiSourceFrameArrivedFunc;

        public virtual int GetMultiSourceFrameArrivedEventData(
            long waitableHandle,
            out IMultiSourceFrameArrivedEventArgs eventData
        ){
            var fp = GetFunctionPointer(5);
            if(m_GetMultiSourceFrameArrivedEventDataFunc==null) m_GetMultiSourceFrameArrivedEventDataFunc = (GetMultiSourceFrameArrivedEventDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMultiSourceFrameArrivedEventDataFunc));
            eventData = new IMultiSourceFrameArrivedEventArgs();
            return m_GetMultiSourceFrameArrivedEventDataFunc(m_ptr, waitableHandle, out eventData.PtrForNew);
        }
        delegate int GetMultiSourceFrameArrivedEventDataFunc(IntPtr self, long waitableHandle, out IntPtr eventData);
        GetMultiSourceFrameArrivedEventDataFunc m_GetMultiSourceFrameArrivedEventDataFunc;

        public virtual int AcquireLatestFrame(
            out IMultiSourceFrame multiSourceFrame
        ){
            var fp = GetFunctionPointer(6);
            if(m_AcquireLatestFrameFunc==null) m_AcquireLatestFrameFunc = (AcquireLatestFrameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AcquireLatestFrameFunc));
            multiSourceFrame = new IMultiSourceFrame();
            return m_AcquireLatestFrameFunc(m_ptr, out multiSourceFrame.PtrForNew);
        }
        delegate int AcquireLatestFrameFunc(IntPtr self, out IntPtr multiSourceFrame);
        AcquireLatestFrameFunc m_AcquireLatestFrameFunc;

        public virtual int get_FrameSourceTypes(
            out uint enabledFrameSourceTypes
        ){
            var fp = GetFunctionPointer(7);
            if(m_get_FrameSourceTypesFunc==null) m_get_FrameSourceTypesFunc = (get_FrameSourceTypesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_FrameSourceTypesFunc));
            
            return m_get_FrameSourceTypesFunc(m_ptr, out enabledFrameSourceTypes);
        }
        delegate int get_FrameSourceTypesFunc(IntPtr self, out uint enabledFrameSourceTypes);
        get_FrameSourceTypesFunc m_get_FrameSourceTypesFunc;

        public virtual int get_IsPaused(
            out byte isPaused
        ){
            var fp = GetFunctionPointer(8);
            if(m_get_IsPausedFunc==null) m_get_IsPausedFunc = (get_IsPausedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_IsPausedFunc));
            
            return m_get_IsPausedFunc(m_ptr, out isPaused);
        }
        delegate int get_IsPausedFunc(IntPtr self, out byte isPaused);
        get_IsPausedFunc m_get_IsPausedFunc;

        public virtual int put_IsPaused(
            byte isPaused
        ){
            var fp = GetFunctionPointer(9);
            if(m_put_IsPausedFunc==null) m_put_IsPausedFunc = (put_IsPausedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_IsPausedFunc));
            
            return m_put_IsPausedFunc(m_ptr, isPaused);
        }
        delegate int put_IsPausedFunc(IntPtr self, byte isPaused);
        put_IsPausedFunc m_put_IsPausedFunc;

        public virtual int get_KinectSensor(
            out IKinectSensor sensor
        ){
            var fp = GetFunctionPointer(10);
            if(m_get_KinectSensorFunc==null) m_get_KinectSensorFunc = (get_KinectSensorFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_KinectSensorFunc));
            sensor = new IKinectSensor();
            return m_get_KinectSensorFunc(m_ptr, out sensor.PtrForNew);
        }
        delegate int get_KinectSensorFunc(IntPtr self, out IntPtr sensor);
        get_KinectSensorFunc m_get_KinectSensorFunc;

    }
}
