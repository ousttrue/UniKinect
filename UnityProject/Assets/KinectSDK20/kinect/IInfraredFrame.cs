// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace KinectSDK20 {
    public class IInfraredFrame: IUnknown
    {
        static Guid s_uuid = new Guid("ea83823c-7613-4f29-bd51-4a9678a52c7e");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int CopyFrameDataToArray(
            uint capacity,
            out ushort frameData
        ){
            var fp = GetFunctionPointer(3);
            if(m_CopyFrameDataToArrayFunc==null) m_CopyFrameDataToArrayFunc = (CopyFrameDataToArrayFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyFrameDataToArrayFunc));
            
            return m_CopyFrameDataToArrayFunc(m_ptr, capacity, out frameData);
        }
        delegate int CopyFrameDataToArrayFunc(IntPtr self, uint capacity, out ushort frameData);
        CopyFrameDataToArrayFunc m_CopyFrameDataToArrayFunc;

        public virtual int AccessUnderlyingBuffer(
            out uint capacity,
            out IntPtr buffer
        ){
            var fp = GetFunctionPointer(4);
            if(m_AccessUnderlyingBufferFunc==null) m_AccessUnderlyingBufferFunc = (AccessUnderlyingBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AccessUnderlyingBufferFunc));
            
            return m_AccessUnderlyingBufferFunc(m_ptr, out capacity, out buffer);
        }
        delegate int AccessUnderlyingBufferFunc(IntPtr self, out uint capacity, out IntPtr buffer);
        AccessUnderlyingBufferFunc m_AccessUnderlyingBufferFunc;

        public virtual int get_FrameDescription(
            out IFrameDescription frameDescription
        ){
            var fp = GetFunctionPointer(5);
            if(m_get_FrameDescriptionFunc==null) m_get_FrameDescriptionFunc = (get_FrameDescriptionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_FrameDescriptionFunc));
            frameDescription = new IFrameDescription();
            return m_get_FrameDescriptionFunc(m_ptr, out frameDescription.PtrForNew);
        }
        delegate int get_FrameDescriptionFunc(IntPtr self, out IntPtr frameDescription);
        get_FrameDescriptionFunc m_get_FrameDescriptionFunc;

        public virtual int get_RelativeTime(
            out long relativeTime
        ){
            var fp = GetFunctionPointer(6);
            if(m_get_RelativeTimeFunc==null) m_get_RelativeTimeFunc = (get_RelativeTimeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_RelativeTimeFunc));
            
            return m_get_RelativeTimeFunc(m_ptr, out relativeTime);
        }
        delegate int get_RelativeTimeFunc(IntPtr self, out long relativeTime);
        get_RelativeTimeFunc m_get_RelativeTimeFunc;

        public virtual int get_InfraredFrameSource(
            out IInfraredFrameSource infraredFrameSource
        ){
            var fp = GetFunctionPointer(7);
            if(m_get_InfraredFrameSourceFunc==null) m_get_InfraredFrameSourceFunc = (get_InfraredFrameSourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_InfraredFrameSourceFunc));
            infraredFrameSource = new IInfraredFrameSource();
            return m_get_InfraredFrameSourceFunc(m_ptr, out infraredFrameSource.PtrForNew);
        }
        delegate int get_InfraredFrameSourceFunc(IntPtr self, out IntPtr infraredFrameSource);
        get_InfraredFrameSourceFunc m_get_InfraredFrameSourceFunc;

    }
}
