// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace KinectSDK20 {
    public class IColorFrame: IUnknown
    {
        static Guid s_uuid = new Guid("39d05803-8803-4e86-ad9f-13f6954e4aca");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int get_RawColorImageFormat(
            out _ColorImageFormat rawColorImageFormat
        ){
            var fp = GetFunctionPointer(3);
            if(m_get_RawColorImageFormatFunc==null) m_get_RawColorImageFormatFunc = (get_RawColorImageFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_RawColorImageFormatFunc));
            
            return m_get_RawColorImageFormatFunc(m_ptr, out rawColorImageFormat);
        }
        delegate int get_RawColorImageFormatFunc(IntPtr self, out _ColorImageFormat rawColorImageFormat);
        get_RawColorImageFormatFunc m_get_RawColorImageFormatFunc;

        public virtual int get_FrameDescription(
            out IFrameDescription rawFrameDescription
        ){
            var fp = GetFunctionPointer(4);
            if(m_get_FrameDescriptionFunc==null) m_get_FrameDescriptionFunc = (get_FrameDescriptionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_FrameDescriptionFunc));
            rawFrameDescription = new IFrameDescription();
            return m_get_FrameDescriptionFunc(m_ptr, out rawFrameDescription.PtrForNew);
        }
        delegate int get_FrameDescriptionFunc(IntPtr self, out IntPtr rawFrameDescription);
        get_FrameDescriptionFunc m_get_FrameDescriptionFunc;

        public virtual int CopyRawFrameDataToArray(
            uint capacity,
            out byte frameData
        ){
            var fp = GetFunctionPointer(5);
            if(m_CopyRawFrameDataToArrayFunc==null) m_CopyRawFrameDataToArrayFunc = (CopyRawFrameDataToArrayFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyRawFrameDataToArrayFunc));
            
            return m_CopyRawFrameDataToArrayFunc(m_ptr, capacity, out frameData);
        }
        delegate int CopyRawFrameDataToArrayFunc(IntPtr self, uint capacity, out byte frameData);
        CopyRawFrameDataToArrayFunc m_CopyRawFrameDataToArrayFunc;

        public virtual int AccessRawUnderlyingBuffer(
            out uint capacity,
            out IntPtr buffer
        ){
            var fp = GetFunctionPointer(6);
            if(m_AccessRawUnderlyingBufferFunc==null) m_AccessRawUnderlyingBufferFunc = (AccessRawUnderlyingBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AccessRawUnderlyingBufferFunc));
            
            return m_AccessRawUnderlyingBufferFunc(m_ptr, out capacity, out buffer);
        }
        delegate int AccessRawUnderlyingBufferFunc(IntPtr self, out uint capacity, out IntPtr buffer);
        AccessRawUnderlyingBufferFunc m_AccessRawUnderlyingBufferFunc;

        public virtual int CopyConvertedFrameDataToArray(
            uint capacity,
            out byte frameData,
            _ColorImageFormat colorFormat
        ){
            var fp = GetFunctionPointer(7);
            if(m_CopyConvertedFrameDataToArrayFunc==null) m_CopyConvertedFrameDataToArrayFunc = (CopyConvertedFrameDataToArrayFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyConvertedFrameDataToArrayFunc));
            
            return m_CopyConvertedFrameDataToArrayFunc(m_ptr, capacity, out frameData, colorFormat);
        }
        delegate int CopyConvertedFrameDataToArrayFunc(IntPtr self, uint capacity, out byte frameData, _ColorImageFormat colorFormat);
        CopyConvertedFrameDataToArrayFunc m_CopyConvertedFrameDataToArrayFunc;

        public virtual int CreateFrameDescription(
            _ColorImageFormat format,
            out IFrameDescription frameDescription
        ){
            var fp = GetFunctionPointer(8);
            if(m_CreateFrameDescriptionFunc==null) m_CreateFrameDescriptionFunc = (CreateFrameDescriptionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateFrameDescriptionFunc));
            frameDescription = new IFrameDescription();
            return m_CreateFrameDescriptionFunc(m_ptr, format, out frameDescription.PtrForNew);
        }
        delegate int CreateFrameDescriptionFunc(IntPtr self, _ColorImageFormat format, out IntPtr frameDescription);
        CreateFrameDescriptionFunc m_CreateFrameDescriptionFunc;

        public virtual int get_ColorCameraSettings(
            out IColorCameraSettings colorCameraSettings
        ){
            var fp = GetFunctionPointer(9);
            if(m_get_ColorCameraSettingsFunc==null) m_get_ColorCameraSettingsFunc = (get_ColorCameraSettingsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_ColorCameraSettingsFunc));
            colorCameraSettings = new IColorCameraSettings();
            return m_get_ColorCameraSettingsFunc(m_ptr, out colorCameraSettings.PtrForNew);
        }
        delegate int get_ColorCameraSettingsFunc(IntPtr self, out IntPtr colorCameraSettings);
        get_ColorCameraSettingsFunc m_get_ColorCameraSettingsFunc;

        public virtual int get_RelativeTime(
            out long relativeTime
        ){
            var fp = GetFunctionPointer(10);
            if(m_get_RelativeTimeFunc==null) m_get_RelativeTimeFunc = (get_RelativeTimeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_RelativeTimeFunc));
            
            return m_get_RelativeTimeFunc(m_ptr, out relativeTime);
        }
        delegate int get_RelativeTimeFunc(IntPtr self, out long relativeTime);
        get_RelativeTimeFunc m_get_RelativeTimeFunc;

        public virtual int get_ColorFrameSource(
            out IColorFrameSource colorFrameSource
        ){
            var fp = GetFunctionPointer(11);
            if(m_get_ColorFrameSourceFunc==null) m_get_ColorFrameSourceFunc = (get_ColorFrameSourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_ColorFrameSourceFunc));
            colorFrameSource = new IColorFrameSource();
            return m_get_ColorFrameSourceFunc(m_ptr, out colorFrameSource.PtrForNew);
        }
        delegate int get_ColorFrameSourceFunc(IntPtr self, out IntPtr colorFrameSource);
        get_ColorFrameSourceFunc m_get_ColorFrameSourceFunc;

    }
}
