// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace KinectSDK20 {
    public static partial class Constants {
        public const int __REQUIRED_RPCNDR_H_VERSION__ = 475;
        public const int __REQUIRED_RPCSAL_H_VERSION__ = 100;
        public const int BODY_COUNT = 6;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _Joint // 1
    {
        public _JointType JointType;
        public _CameraSpacePoint Position;
        public _TrackingState TrackingState;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _CameraSpacePoint // 1
    {
        public float X;
        public float Y;
        public float Z;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _JointOrientation // 1
    {
        public _JointType JointType;
        public _Vector4 Orientation;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _Vector4 // 1
    {
        public float x;
        public float y;
        public float z;
        public float w;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _PointF // 1
    {
        public float X;
        public float Y;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _DepthSpacePoint // 1
    {
        public float X;
        public float Y;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _ColorSpacePoint // 1
    {
        public float X;
        public float Y;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _CameraIntrinsics // 1
    {
        public float FocalLengthX;
        public float FocalLengthY;
        public float PrincipalPointX;
        public float PrincipalPointY;
        public float RadialDistortionSecondOrder;
        public float RadialDistortionFourthOrder;
        public float RadialDistortionSixthOrder;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _KinectManipulationDelta // 1
    {
        public _PointF Translation;
        public float Scale;
        public float Rotation;
        public float Expansion;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _KinectManipulationVelocities // 1
    {
        public _PointF Linear;
        public float Angular;
        public float Expansion;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _RectF // 1
    {
        public float X;
        public float Y;
        public float Width;
        public float Height;
    }
    public static class kinect {
        [DllImport("kinect20.dll")]
        public static extern int GetDefaultKinectSensor(
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<IKinectSensor>))]out IKinectSensor defaultKinectSensor
        );
        [DllImport("kinect20.dll")]
        public static extern int GetKinectCoreWindowForCurrentThread(
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<IKinectCoreWindow>))]out IKinectCoreWindow ppKinectCoreWindow
        );
        [DllImport("kinect20.dll")]
        public static extern int CreateKinectGestureRecognizer(
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<IKinectGestureRecognizer>))]out IKinectGestureRecognizer ppKinectGestureRecognizer
        );
        [DllImport("kinect20.dll")]
        public static extern int OverrideKinectInteractionMode(
            _KinectInteractionMode mode
        );
        [DllImport("kinect20.dll")]
        public static extern int SetKinectOnePersonSystemEngagement(
        );
        [DllImport("kinect20.dll")]
        public static extern int SetKinectTwoPersonSystemEngagement(
        );
        [DllImport("kinect20.dll")]
        public static extern int SetKinectOnePersonManualEngagement(
            IBodyHandPair pBodyHandPair
        );
        [DllImport("kinect20.dll")]
        public static extern int SetKinectTwoPersonManualEngagement(
            IBodyHandPair pBodyHandPair1,
            IBodyHandPair pBodyHandPair2
        );
        [DllImport("kinect20.dll")]
        public static extern int GetKinectEngagementMode(
            out _KinectEngagementMode pMode
        );
        [DllImport("kinect20.dll")]
        public static extern int GetKinectManualEngagedHandCount(
            out uint pManualEngagedHandCount
        );
        [DllImport("kinect20.dll")]
        public static extern int GetKinectManualEngagedHand(
            uint manualEngagedHandIndex,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<IBodyHandPair>))]out IBodyHandPair ppManualEngagedHand
        );
        [DllImport("kinect20.dll")]
        public static extern int GetMaximumKinectEngagedPersonCount(
            out uint pMaximumKinectEngagedPersonCount
        );
        [DllImport("kinect20.dll")]
        public static extern int CreateBodyHandPair(
            ulong bodyTrackingId,
            _HandType handType,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<IBodyHandPair>))]out IBodyHandPair ppBodyHandPair
        );
    }
}
