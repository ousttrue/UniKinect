// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace KinectSDK20 {
    public class IFrameDescription: IUnknown
    {
        static Guid s_uuid = new Guid("21f6efb7-eb6d-48f4-9c08-181a87bf0c98");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int get_Width(
            out int width
        ){
            var fp = GetFunctionPointer(3);
            if(m_get_WidthFunc==null) m_get_WidthFunc = (get_WidthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_WidthFunc));
            
            return m_get_WidthFunc(m_ptr, out width);
        }
        delegate int get_WidthFunc(IntPtr self, out int width);
        get_WidthFunc m_get_WidthFunc;

        public virtual int get_Height(
            out int height
        ){
            var fp = GetFunctionPointer(4);
            if(m_get_HeightFunc==null) m_get_HeightFunc = (get_HeightFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_HeightFunc));
            
            return m_get_HeightFunc(m_ptr, out height);
        }
        delegate int get_HeightFunc(IntPtr self, out int height);
        get_HeightFunc m_get_HeightFunc;

        public virtual int get_HorizontalFieldOfView(
            out float horizontalFieldOfView
        ){
            var fp = GetFunctionPointer(5);
            if(m_get_HorizontalFieldOfViewFunc==null) m_get_HorizontalFieldOfViewFunc = (get_HorizontalFieldOfViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_HorizontalFieldOfViewFunc));
            
            return m_get_HorizontalFieldOfViewFunc(m_ptr, out horizontalFieldOfView);
        }
        delegate int get_HorizontalFieldOfViewFunc(IntPtr self, out float horizontalFieldOfView);
        get_HorizontalFieldOfViewFunc m_get_HorizontalFieldOfViewFunc;

        public virtual int get_VerticalFieldOfView(
            out float verticalFieldOfView
        ){
            var fp = GetFunctionPointer(6);
            if(m_get_VerticalFieldOfViewFunc==null) m_get_VerticalFieldOfViewFunc = (get_VerticalFieldOfViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_VerticalFieldOfViewFunc));
            
            return m_get_VerticalFieldOfViewFunc(m_ptr, out verticalFieldOfView);
        }
        delegate int get_VerticalFieldOfViewFunc(IntPtr self, out float verticalFieldOfView);
        get_VerticalFieldOfViewFunc m_get_VerticalFieldOfViewFunc;

        public virtual int get_DiagonalFieldOfView(
            out float diagonalFieldOfView
        ){
            var fp = GetFunctionPointer(7);
            if(m_get_DiagonalFieldOfViewFunc==null) m_get_DiagonalFieldOfViewFunc = (get_DiagonalFieldOfViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_DiagonalFieldOfViewFunc));
            
            return m_get_DiagonalFieldOfViewFunc(m_ptr, out diagonalFieldOfView);
        }
        delegate int get_DiagonalFieldOfViewFunc(IntPtr self, out float diagonalFieldOfView);
        get_DiagonalFieldOfViewFunc m_get_DiagonalFieldOfViewFunc;

        public virtual int get_LengthInPixels(
            out uint lengthInPixels
        ){
            var fp = GetFunctionPointer(8);
            if(m_get_LengthInPixelsFunc==null) m_get_LengthInPixelsFunc = (get_LengthInPixelsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_LengthInPixelsFunc));
            
            return m_get_LengthInPixelsFunc(m_ptr, out lengthInPixels);
        }
        delegate int get_LengthInPixelsFunc(IntPtr self, out uint lengthInPixels);
        get_LengthInPixelsFunc m_get_LengthInPixelsFunc;

        public virtual int get_BytesPerPixel(
            out uint bytesPerPixel
        ){
            var fp = GetFunctionPointer(9);
            if(m_get_BytesPerPixelFunc==null) m_get_BytesPerPixelFunc = (get_BytesPerPixelFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_BytesPerPixelFunc));
            
            return m_get_BytesPerPixelFunc(m_ptr, out bytesPerPixel);
        }
        delegate int get_BytesPerPixelFunc(IntPtr self, out uint bytesPerPixel);
        get_BytesPerPixelFunc m_get_BytesPerPixelFunc;

    }
}
