// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace KinectSDK20 {
    public class IKinectPointerPointProperties: IUnknown
    {
        static Guid s_uuid = new Guid("5527a776-ca76-47ba-95b4-a2db2bd32207");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int get_IsPrimary(
            out byte isPrimary
        ){
            var fp = GetFunctionPointer(3);
            if(m_get_IsPrimaryFunc==null) m_get_IsPrimaryFunc = (get_IsPrimaryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_IsPrimaryFunc));
            
            return m_get_IsPrimaryFunc(m_ptr, out isPrimary);
        }
        delegate int get_IsPrimaryFunc(IntPtr self, out byte isPrimary);
        get_IsPrimaryFunc m_get_IsPrimaryFunc;

        public virtual int get_IsInRange(
            out byte isInRange
        ){
            var fp = GetFunctionPointer(4);
            if(m_get_IsInRangeFunc==null) m_get_IsInRangeFunc = (get_IsInRangeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_IsInRangeFunc));
            
            return m_get_IsInRangeFunc(m_ptr, out isInRange);
        }
        delegate int get_IsInRangeFunc(IntPtr self, out byte isInRange);
        get_IsInRangeFunc m_get_IsInRangeFunc;

        public virtual int get_IsEngaged(
            out byte isEngaged
        ){
            var fp = GetFunctionPointer(5);
            if(m_get_IsEngagedFunc==null) m_get_IsEngagedFunc = (get_IsEngagedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_IsEngagedFunc));
            
            return m_get_IsEngagedFunc(m_ptr, out isEngaged);
        }
        delegate int get_IsEngagedFunc(IntPtr self, out byte isEngaged);
        get_IsEngagedFunc m_get_IsEngagedFunc;

        public virtual int get_BodyTrackingId(
            out ulong bodyTrackingId
        ){
            var fp = GetFunctionPointer(6);
            if(m_get_BodyTrackingIdFunc==null) m_get_BodyTrackingIdFunc = (get_BodyTrackingIdFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_BodyTrackingIdFunc));
            
            return m_get_BodyTrackingIdFunc(m_ptr, out bodyTrackingId);
        }
        delegate int get_BodyTrackingIdFunc(IntPtr self, out ulong bodyTrackingId);
        get_BodyTrackingIdFunc m_get_BodyTrackingIdFunc;

        public virtual int get_HandType(
            out _HandType handType
        ){
            var fp = GetFunctionPointer(7);
            if(m_get_HandTypeFunc==null) m_get_HandTypeFunc = (get_HandTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_HandTypeFunc));
            
            return m_get_HandTypeFunc(m_ptr, out handType);
        }
        delegate int get_HandTypeFunc(IntPtr self, out _HandType handType);
        get_HandTypeFunc m_get_HandTypeFunc;

        public virtual int get_HandReachExtent(
            out float handReachExtent
        ){
            var fp = GetFunctionPointer(8);
            if(m_get_HandReachExtentFunc==null) m_get_HandReachExtentFunc = (get_HandReachExtentFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_HandReachExtentFunc));
            
            return m_get_HandReachExtentFunc(m_ptr, out handReachExtent);
        }
        delegate int get_HandReachExtentFunc(IntPtr self, out float handReachExtent);
        get_HandReachExtentFunc m_get_HandReachExtentFunc;

        public virtual int get_BodyTimeCounter(
            out long bodyTimeCounter
        ){
            var fp = GetFunctionPointer(9);
            if(m_get_BodyTimeCounterFunc==null) m_get_BodyTimeCounterFunc = (get_BodyTimeCounterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_BodyTimeCounterFunc));
            
            return m_get_BodyTimeCounterFunc(m_ptr, out bodyTimeCounter);
        }
        delegate int get_BodyTimeCounterFunc(IntPtr self, out long bodyTimeCounter);
        get_BodyTimeCounterFunc m_get_BodyTimeCounterFunc;

        public virtual int get_HandRotation(
            out float handRotation
        ){
            var fp = GetFunctionPointer(10);
            if(m_get_HandRotationFunc==null) m_get_HandRotationFunc = (get_HandRotationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_HandRotationFunc));
            
            return m_get_HandRotationFunc(m_ptr, out handRotation);
        }
        delegate int get_HandRotationFunc(IntPtr self, out float handRotation);
        get_HandRotationFunc m_get_HandRotationFunc;

        public virtual int get_PressExtent(
            out float pressExtent
        ){
            var fp = GetFunctionPointer(11);
            if(m_get_PressExtentFunc==null) m_get_PressExtentFunc = (get_PressExtentFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_PressExtentFunc));
            
            return m_get_PressExtentFunc(m_ptr, out pressExtent);
        }
        delegate int get_PressExtentFunc(IntPtr self, out float pressExtent);
        get_PressExtentFunc m_get_PressExtentFunc;

        public virtual int get_UnclampedPosition(
            out _PointF unclampedPosition
        ){
            var fp = GetFunctionPointer(12);
            if(m_get_UnclampedPositionFunc==null) m_get_UnclampedPositionFunc = (get_UnclampedPositionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_UnclampedPositionFunc));
            
            return m_get_UnclampedPositionFunc(m_ptr, out unclampedPosition);
        }
        delegate int get_UnclampedPositionFunc(IntPtr self, out _PointF unclampedPosition);
        get_UnclampedPositionFunc m_get_UnclampedPositionFunc;

    }
}
