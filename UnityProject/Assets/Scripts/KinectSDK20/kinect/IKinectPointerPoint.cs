// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace KinectSDK20 {
    public class IKinectPointerPoint: IUnknown
    {
        static Guid s_uuid = new Guid("d2f1e5b8-9dad-4933-bcd2-90f4c64e17ac");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int get_PointerDevice(
            out IKinectPointerDevice ppPointerDevice
        ){
            var fp = GetFunctionPointer(3);
            if(m_get_PointerDeviceFunc==null) m_get_PointerDeviceFunc = (get_PointerDeviceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_PointerDeviceFunc));
            ppPointerDevice = new IKinectPointerDevice();
            return m_get_PointerDeviceFunc(m_ptr, out ppPointerDevice.PtrForNew);
        }
        delegate int get_PointerDeviceFunc(IntPtr self, out IntPtr ppPointerDevice);
        get_PointerDeviceFunc m_get_PointerDeviceFunc;

        public virtual int get_PointerId(
            out uint pointerId
        ){
            var fp = GetFunctionPointer(4);
            if(m_get_PointerIdFunc==null) m_get_PointerIdFunc = (get_PointerIdFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_PointerIdFunc));
            
            return m_get_PointerIdFunc(m_ptr, out pointerId);
        }
        delegate int get_PointerIdFunc(IntPtr self, out uint pointerId);
        get_PointerIdFunc m_get_PointerIdFunc;

        public virtual int get_Position(
            out _PointF position
        ){
            var fp = GetFunctionPointer(5);
            if(m_get_PositionFunc==null) m_get_PositionFunc = (get_PositionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_PositionFunc));
            
            return m_get_PositionFunc(m_ptr, out position);
        }
        delegate int get_PositionFunc(IntPtr self, out _PointF position);
        get_PositionFunc m_get_PositionFunc;

        public virtual int get_RawPosition(
            out _PointF rawPosition
        ){
            var fp = GetFunctionPointer(6);
            if(m_get_RawPositionFunc==null) m_get_RawPositionFunc = (get_RawPositionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_RawPositionFunc));
            
            return m_get_RawPositionFunc(m_ptr, out rawPosition);
        }
        delegate int get_RawPositionFunc(IntPtr self, out _PointF rawPosition);
        get_RawPositionFunc m_get_RawPositionFunc;

        public virtual int get_Timestamp(
            out ulong timestamp
        ){
            var fp = GetFunctionPointer(7);
            if(m_get_TimestampFunc==null) m_get_TimestampFunc = (get_TimestampFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_TimestampFunc));
            
            return m_get_TimestampFunc(m_ptr, out timestamp);
        }
        delegate int get_TimestampFunc(IntPtr self, out ulong timestamp);
        get_TimestampFunc m_get_TimestampFunc;

        public virtual int get_Properties(
            out IKinectPointerPointProperties ppProperties
        ){
            var fp = GetFunctionPointer(8);
            if(m_get_PropertiesFunc==null) m_get_PropertiesFunc = (get_PropertiesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_PropertiesFunc));
            ppProperties = new IKinectPointerPointProperties();
            return m_get_PropertiesFunc(m_ptr, out ppProperties.PtrForNew);
        }
        delegate int get_PropertiesFunc(IntPtr self, out IntPtr ppProperties);
        get_PropertiesFunc m_get_PropertiesFunc;

    }
}
