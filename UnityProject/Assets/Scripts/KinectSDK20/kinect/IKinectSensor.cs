// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace KinectSDK20 {
    public class IKinectSensor: IUnknown
    {
        static Guid s_uuid = new Guid("3c6eba94-0de1-4360-b6d4-653a10794c8b");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int SubscribeIsAvailableChanged(
            out long waitableHandle
        ){
            var fp = GetFunctionPointer(3);
            if(m_SubscribeIsAvailableChangedFunc==null) m_SubscribeIsAvailableChangedFunc = (SubscribeIsAvailableChangedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SubscribeIsAvailableChangedFunc));
            
            return m_SubscribeIsAvailableChangedFunc(m_ptr, out waitableHandle);
        }
        delegate int SubscribeIsAvailableChangedFunc(IntPtr self, out long waitableHandle);
        SubscribeIsAvailableChangedFunc m_SubscribeIsAvailableChangedFunc;

        public virtual int UnsubscribeIsAvailableChanged(
            long waitableHandle
        ){
            var fp = GetFunctionPointer(4);
            if(m_UnsubscribeIsAvailableChangedFunc==null) m_UnsubscribeIsAvailableChangedFunc = (UnsubscribeIsAvailableChangedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnsubscribeIsAvailableChangedFunc));
            
            return m_UnsubscribeIsAvailableChangedFunc(m_ptr, waitableHandle);
        }
        delegate int UnsubscribeIsAvailableChangedFunc(IntPtr self, long waitableHandle);
        UnsubscribeIsAvailableChangedFunc m_UnsubscribeIsAvailableChangedFunc;

        public virtual int GetIsAvailableChangedEventData(
            long waitableHandle,
            out IIsAvailableChangedEventArgs eventData
        ){
            var fp = GetFunctionPointer(5);
            if(m_GetIsAvailableChangedEventDataFunc==null) m_GetIsAvailableChangedEventDataFunc = (GetIsAvailableChangedEventDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetIsAvailableChangedEventDataFunc));
            eventData = new IIsAvailableChangedEventArgs();
            return m_GetIsAvailableChangedEventDataFunc(m_ptr, waitableHandle, out eventData.PtrForNew);
        }
        delegate int GetIsAvailableChangedEventDataFunc(IntPtr self, long waitableHandle, out IntPtr eventData);
        GetIsAvailableChangedEventDataFunc m_GetIsAvailableChangedEventDataFunc;

        public virtual int Open(
        ){
            var fp = GetFunctionPointer(6);
            if(m_OpenFunc==null) m_OpenFunc = (OpenFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OpenFunc));
            
            return m_OpenFunc(m_ptr);
        }
        delegate int OpenFunc(IntPtr self);
        OpenFunc m_OpenFunc;

        public virtual int Close(
        ){
            var fp = GetFunctionPointer(7);
            if(m_CloseFunc==null) m_CloseFunc = (CloseFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CloseFunc));
            
            return m_CloseFunc(m_ptr);
        }
        delegate int CloseFunc(IntPtr self);
        CloseFunc m_CloseFunc;

        public virtual int get_IsOpen(
            out byte isOpen
        ){
            var fp = GetFunctionPointer(8);
            if(m_get_IsOpenFunc==null) m_get_IsOpenFunc = (get_IsOpenFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_IsOpenFunc));
            
            return m_get_IsOpenFunc(m_ptr, out isOpen);
        }
        delegate int get_IsOpenFunc(IntPtr self, out byte isOpen);
        get_IsOpenFunc m_get_IsOpenFunc;

        public virtual int get_IsAvailable(
            out byte isAvailable
        ){
            var fp = GetFunctionPointer(9);
            if(m_get_IsAvailableFunc==null) m_get_IsAvailableFunc = (get_IsAvailableFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_IsAvailableFunc));
            
            return m_get_IsAvailableFunc(m_ptr, out isAvailable);
        }
        delegate int get_IsAvailableFunc(IntPtr self, out byte isAvailable);
        get_IsAvailableFunc m_get_IsAvailableFunc;

        public virtual int get_ColorFrameSource(
            out IColorFrameSource colorFrameSource
        ){
            var fp = GetFunctionPointer(10);
            if(m_get_ColorFrameSourceFunc==null) m_get_ColorFrameSourceFunc = (get_ColorFrameSourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_ColorFrameSourceFunc));
            colorFrameSource = new IColorFrameSource();
            return m_get_ColorFrameSourceFunc(m_ptr, out colorFrameSource.PtrForNew);
        }
        delegate int get_ColorFrameSourceFunc(IntPtr self, out IntPtr colorFrameSource);
        get_ColorFrameSourceFunc m_get_ColorFrameSourceFunc;

        public virtual int get_DepthFrameSource(
            out IDepthFrameSource depthFrameSource
        ){
            var fp = GetFunctionPointer(11);
            if(m_get_DepthFrameSourceFunc==null) m_get_DepthFrameSourceFunc = (get_DepthFrameSourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_DepthFrameSourceFunc));
            depthFrameSource = new IDepthFrameSource();
            return m_get_DepthFrameSourceFunc(m_ptr, out depthFrameSource.PtrForNew);
        }
        delegate int get_DepthFrameSourceFunc(IntPtr self, out IntPtr depthFrameSource);
        get_DepthFrameSourceFunc m_get_DepthFrameSourceFunc;

        public virtual int get_BodyFrameSource(
            out IBodyFrameSource bodyFrameSource
        ){
            var fp = GetFunctionPointer(12);
            if(m_get_BodyFrameSourceFunc==null) m_get_BodyFrameSourceFunc = (get_BodyFrameSourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_BodyFrameSourceFunc));
            bodyFrameSource = new IBodyFrameSource();
            return m_get_BodyFrameSourceFunc(m_ptr, out bodyFrameSource.PtrForNew);
        }
        delegate int get_BodyFrameSourceFunc(IntPtr self, out IntPtr bodyFrameSource);
        get_BodyFrameSourceFunc m_get_BodyFrameSourceFunc;

        public virtual int get_BodyIndexFrameSource(
            out IBodyIndexFrameSource bodyIndexFrameSource
        ){
            var fp = GetFunctionPointer(13);
            if(m_get_BodyIndexFrameSourceFunc==null) m_get_BodyIndexFrameSourceFunc = (get_BodyIndexFrameSourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_BodyIndexFrameSourceFunc));
            bodyIndexFrameSource = new IBodyIndexFrameSource();
            return m_get_BodyIndexFrameSourceFunc(m_ptr, out bodyIndexFrameSource.PtrForNew);
        }
        delegate int get_BodyIndexFrameSourceFunc(IntPtr self, out IntPtr bodyIndexFrameSource);
        get_BodyIndexFrameSourceFunc m_get_BodyIndexFrameSourceFunc;

        public virtual int get_InfraredFrameSource(
            out IInfraredFrameSource infraredFrameSource
        ){
            var fp = GetFunctionPointer(14);
            if(m_get_InfraredFrameSourceFunc==null) m_get_InfraredFrameSourceFunc = (get_InfraredFrameSourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_InfraredFrameSourceFunc));
            infraredFrameSource = new IInfraredFrameSource();
            return m_get_InfraredFrameSourceFunc(m_ptr, out infraredFrameSource.PtrForNew);
        }
        delegate int get_InfraredFrameSourceFunc(IntPtr self, out IntPtr infraredFrameSource);
        get_InfraredFrameSourceFunc m_get_InfraredFrameSourceFunc;

        public virtual int get_LongExposureInfraredFrameSource(
            out ILongExposureInfraredFrameSource longExposureInfraredFrameSource
        ){
            var fp = GetFunctionPointer(15);
            if(m_get_LongExposureInfraredFrameSourceFunc==null) m_get_LongExposureInfraredFrameSourceFunc = (get_LongExposureInfraredFrameSourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_LongExposureInfraredFrameSourceFunc));
            longExposureInfraredFrameSource = new ILongExposureInfraredFrameSource();
            return m_get_LongExposureInfraredFrameSourceFunc(m_ptr, out longExposureInfraredFrameSource.PtrForNew);
        }
        delegate int get_LongExposureInfraredFrameSourceFunc(IntPtr self, out IntPtr longExposureInfraredFrameSource);
        get_LongExposureInfraredFrameSourceFunc m_get_LongExposureInfraredFrameSourceFunc;

        public virtual int get_AudioSource(
            out IAudioSource audioSource
        ){
            var fp = GetFunctionPointer(16);
            if(m_get_AudioSourceFunc==null) m_get_AudioSourceFunc = (get_AudioSourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_AudioSourceFunc));
            audioSource = new IAudioSource();
            return m_get_AudioSourceFunc(m_ptr, out audioSource.PtrForNew);
        }
        delegate int get_AudioSourceFunc(IntPtr self, out IntPtr audioSource);
        get_AudioSourceFunc m_get_AudioSourceFunc;

        public virtual int OpenMultiSourceFrameReader(
            uint enabledFrameSourceTypes,
            out IMultiSourceFrameReader multiSourceFrameReader
        ){
            var fp = GetFunctionPointer(17);
            if(m_OpenMultiSourceFrameReaderFunc==null) m_OpenMultiSourceFrameReaderFunc = (OpenMultiSourceFrameReaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OpenMultiSourceFrameReaderFunc));
            multiSourceFrameReader = new IMultiSourceFrameReader();
            return m_OpenMultiSourceFrameReaderFunc(m_ptr, enabledFrameSourceTypes, out multiSourceFrameReader.PtrForNew);
        }
        delegate int OpenMultiSourceFrameReaderFunc(IntPtr self, uint enabledFrameSourceTypes, out IntPtr multiSourceFrameReader);
        OpenMultiSourceFrameReaderFunc m_OpenMultiSourceFrameReaderFunc;

        public virtual int get_CoordinateMapper(
            out ICoordinateMapper coordinateMapper
        ){
            var fp = GetFunctionPointer(18);
            if(m_get_CoordinateMapperFunc==null) m_get_CoordinateMapperFunc = (get_CoordinateMapperFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_CoordinateMapperFunc));
            coordinateMapper = new ICoordinateMapper();
            return m_get_CoordinateMapperFunc(m_ptr, out coordinateMapper.PtrForNew);
        }
        delegate int get_CoordinateMapperFunc(IntPtr self, out IntPtr coordinateMapper);
        get_CoordinateMapperFunc m_get_CoordinateMapperFunc;

        public virtual int get_UniqueKinectId(
            uint bufferSize,
            out ushort uniqueKinectId
        ){
            var fp = GetFunctionPointer(19);
            if(m_get_UniqueKinectIdFunc==null) m_get_UniqueKinectIdFunc = (get_UniqueKinectIdFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_UniqueKinectIdFunc));
            
            return m_get_UniqueKinectIdFunc(m_ptr, bufferSize, out uniqueKinectId);
        }
        delegate int get_UniqueKinectIdFunc(IntPtr self, uint bufferSize, out ushort uniqueKinectId);
        get_UniqueKinectIdFunc m_get_UniqueKinectIdFunc;

        public virtual int get_KinectCapabilities(
            out uint capabilities
        ){
            var fp = GetFunctionPointer(20);
            if(m_get_KinectCapabilitiesFunc==null) m_get_KinectCapabilitiesFunc = (get_KinectCapabilitiesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_KinectCapabilitiesFunc));
            
            return m_get_KinectCapabilitiesFunc(m_ptr, out capabilities);
        }
        delegate int get_KinectCapabilitiesFunc(IntPtr self, out uint capabilities);
        get_KinectCapabilitiesFunc m_get_KinectCapabilitiesFunc;

    }
}
