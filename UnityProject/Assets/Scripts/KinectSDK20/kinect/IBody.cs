// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace KinectSDK20 {
    public class IBody: IUnknown
    {
        static Guid s_uuid = new Guid("46aef731-98b0-4d18-827b-933758678f4a");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int GetJoints(
            uint capacity,
            out _Joint joints
        ){
            var fp = GetFunctionPointer(3);
            if(m_GetJointsFunc==null) m_GetJointsFunc = (GetJointsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetJointsFunc));
            
            return m_GetJointsFunc(m_ptr, capacity, out joints);
        }
        delegate int GetJointsFunc(IntPtr self, uint capacity, out _Joint joints);
        GetJointsFunc m_GetJointsFunc;

        public virtual int GetJointOrientations(
            uint capacity,
            out _JointOrientation jointOrientations
        ){
            var fp = GetFunctionPointer(4);
            if(m_GetJointOrientationsFunc==null) m_GetJointOrientationsFunc = (GetJointOrientationsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetJointOrientationsFunc));
            
            return m_GetJointOrientationsFunc(m_ptr, capacity, out jointOrientations);
        }
        delegate int GetJointOrientationsFunc(IntPtr self, uint capacity, out _JointOrientation jointOrientations);
        GetJointOrientationsFunc m_GetJointOrientationsFunc;

        public virtual int get_Engaged(
            out _DetectionResult detectionResult
        ){
            var fp = GetFunctionPointer(5);
            if(m_get_EngagedFunc==null) m_get_EngagedFunc = (get_EngagedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_EngagedFunc));
            
            return m_get_EngagedFunc(m_ptr, out detectionResult);
        }
        delegate int get_EngagedFunc(IntPtr self, out _DetectionResult detectionResult);
        get_EngagedFunc m_get_EngagedFunc;

        public virtual int GetExpressionDetectionResults(
            uint capacity,
            out _DetectionResult detectionResults
        ){
            var fp = GetFunctionPointer(6);
            if(m_GetExpressionDetectionResultsFunc==null) m_GetExpressionDetectionResultsFunc = (GetExpressionDetectionResultsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetExpressionDetectionResultsFunc));
            
            return m_GetExpressionDetectionResultsFunc(m_ptr, capacity, out detectionResults);
        }
        delegate int GetExpressionDetectionResultsFunc(IntPtr self, uint capacity, out _DetectionResult detectionResults);
        GetExpressionDetectionResultsFunc m_GetExpressionDetectionResultsFunc;

        public virtual int GetActivityDetectionResults(
            uint capacity,
            out _DetectionResult detectionResults
        ){
            var fp = GetFunctionPointer(7);
            if(m_GetActivityDetectionResultsFunc==null) m_GetActivityDetectionResultsFunc = (GetActivityDetectionResultsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetActivityDetectionResultsFunc));
            
            return m_GetActivityDetectionResultsFunc(m_ptr, capacity, out detectionResults);
        }
        delegate int GetActivityDetectionResultsFunc(IntPtr self, uint capacity, out _DetectionResult detectionResults);
        GetActivityDetectionResultsFunc m_GetActivityDetectionResultsFunc;

        public virtual int GetAppearanceDetectionResults(
            uint capacity,
            out _DetectionResult detectionResults
        ){
            var fp = GetFunctionPointer(8);
            if(m_GetAppearanceDetectionResultsFunc==null) m_GetAppearanceDetectionResultsFunc = (GetAppearanceDetectionResultsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetAppearanceDetectionResultsFunc));
            
            return m_GetAppearanceDetectionResultsFunc(m_ptr, capacity, out detectionResults);
        }
        delegate int GetAppearanceDetectionResultsFunc(IntPtr self, uint capacity, out _DetectionResult detectionResults);
        GetAppearanceDetectionResultsFunc m_GetAppearanceDetectionResultsFunc;

        public virtual int get_HandLeftState(
            out _HandState handState
        ){
            var fp = GetFunctionPointer(9);
            if(m_get_HandLeftStateFunc==null) m_get_HandLeftStateFunc = (get_HandLeftStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_HandLeftStateFunc));
            
            return m_get_HandLeftStateFunc(m_ptr, out handState);
        }
        delegate int get_HandLeftStateFunc(IntPtr self, out _HandState handState);
        get_HandLeftStateFunc m_get_HandLeftStateFunc;

        public virtual int get_HandLeftConfidence(
            out _TrackingConfidence confidence
        ){
            var fp = GetFunctionPointer(10);
            if(m_get_HandLeftConfidenceFunc==null) m_get_HandLeftConfidenceFunc = (get_HandLeftConfidenceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_HandLeftConfidenceFunc));
            
            return m_get_HandLeftConfidenceFunc(m_ptr, out confidence);
        }
        delegate int get_HandLeftConfidenceFunc(IntPtr self, out _TrackingConfidence confidence);
        get_HandLeftConfidenceFunc m_get_HandLeftConfidenceFunc;

        public virtual int get_HandRightState(
            out _HandState handState
        ){
            var fp = GetFunctionPointer(11);
            if(m_get_HandRightStateFunc==null) m_get_HandRightStateFunc = (get_HandRightStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_HandRightStateFunc));
            
            return m_get_HandRightStateFunc(m_ptr, out handState);
        }
        delegate int get_HandRightStateFunc(IntPtr self, out _HandState handState);
        get_HandRightStateFunc m_get_HandRightStateFunc;

        public virtual int get_HandRightConfidence(
            out _TrackingConfidence confidence
        ){
            var fp = GetFunctionPointer(12);
            if(m_get_HandRightConfidenceFunc==null) m_get_HandRightConfidenceFunc = (get_HandRightConfidenceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_HandRightConfidenceFunc));
            
            return m_get_HandRightConfidenceFunc(m_ptr, out confidence);
        }
        delegate int get_HandRightConfidenceFunc(IntPtr self, out _TrackingConfidence confidence);
        get_HandRightConfidenceFunc m_get_HandRightConfidenceFunc;

        public virtual int get_ClippedEdges(
            out uint clippedEdges
        ){
            var fp = GetFunctionPointer(13);
            if(m_get_ClippedEdgesFunc==null) m_get_ClippedEdgesFunc = (get_ClippedEdgesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_ClippedEdgesFunc));
            
            return m_get_ClippedEdgesFunc(m_ptr, out clippedEdges);
        }
        delegate int get_ClippedEdgesFunc(IntPtr self, out uint clippedEdges);
        get_ClippedEdgesFunc m_get_ClippedEdgesFunc;

        public virtual int get_TrackingId(
            out ulong trackingId
        ){
            var fp = GetFunctionPointer(14);
            if(m_get_TrackingIdFunc==null) m_get_TrackingIdFunc = (get_TrackingIdFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_TrackingIdFunc));
            
            return m_get_TrackingIdFunc(m_ptr, out trackingId);
        }
        delegate int get_TrackingIdFunc(IntPtr self, out ulong trackingId);
        get_TrackingIdFunc m_get_TrackingIdFunc;

        public virtual int get_IsTracked(
            out byte tracked
        ){
            var fp = GetFunctionPointer(15);
            if(m_get_IsTrackedFunc==null) m_get_IsTrackedFunc = (get_IsTrackedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_IsTrackedFunc));
            
            return m_get_IsTrackedFunc(m_ptr, out tracked);
        }
        delegate int get_IsTrackedFunc(IntPtr self, out byte tracked);
        get_IsTrackedFunc m_get_IsTrackedFunc;

        public virtual int get_IsRestricted(
            out byte isRestricted
        ){
            var fp = GetFunctionPointer(16);
            if(m_get_IsRestrictedFunc==null) m_get_IsRestrictedFunc = (get_IsRestrictedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_IsRestrictedFunc));
            
            return m_get_IsRestrictedFunc(m_ptr, out isRestricted);
        }
        delegate int get_IsRestrictedFunc(IntPtr self, out byte isRestricted);
        get_IsRestrictedFunc m_get_IsRestrictedFunc;

        public virtual int get_Lean(
            out _PointF amount
        ){
            var fp = GetFunctionPointer(17);
            if(m_get_LeanFunc==null) m_get_LeanFunc = (get_LeanFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_LeanFunc));
            
            return m_get_LeanFunc(m_ptr, out amount);
        }
        delegate int get_LeanFunc(IntPtr self, out _PointF amount);
        get_LeanFunc m_get_LeanFunc;

        public virtual int get_LeanTrackingState(
            out _TrackingState trackingState
        ){
            var fp = GetFunctionPointer(18);
            if(m_get_LeanTrackingStateFunc==null) m_get_LeanTrackingStateFunc = (get_LeanTrackingStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_LeanTrackingStateFunc));
            
            return m_get_LeanTrackingStateFunc(m_ptr, out trackingState);
        }
        delegate int get_LeanTrackingStateFunc(IntPtr self, out _TrackingState trackingState);
        get_LeanTrackingStateFunc m_get_LeanTrackingStateFunc;

    }
}
