// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace KinectSDK20 {
    public class IAudioBeamFrame: IUnknown
    {
        static Guid s_uuid = new Guid("07aadcc8-ec4a-42f8-90a9-c72ecf0a1d06");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int get_AudioSource(
            out IAudioSource audioSource
        ){
            var fp = GetFunctionPointer(3);
            if(m_get_AudioSourceFunc==null) m_get_AudioSourceFunc = (get_AudioSourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_AudioSourceFunc));
            audioSource = new IAudioSource();
            return m_get_AudioSourceFunc(m_ptr, out audioSource.PtrForNew);
        }
        delegate int get_AudioSourceFunc(IntPtr self, out IntPtr audioSource);
        get_AudioSourceFunc m_get_AudioSourceFunc;

        public virtual int get_Duration(
            out long duration
        ){
            var fp = GetFunctionPointer(4);
            if(m_get_DurationFunc==null) m_get_DurationFunc = (get_DurationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_DurationFunc));
            
            return m_get_DurationFunc(m_ptr, out duration);
        }
        delegate int get_DurationFunc(IntPtr self, out long duration);
        get_DurationFunc m_get_DurationFunc;

        public virtual int get_AudioBeam(
            out IAudioBeam audioBeam
        ){
            var fp = GetFunctionPointer(5);
            if(m_get_AudioBeamFunc==null) m_get_AudioBeamFunc = (get_AudioBeamFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_AudioBeamFunc));
            audioBeam = new IAudioBeam();
            return m_get_AudioBeamFunc(m_ptr, out audioBeam.PtrForNew);
        }
        delegate int get_AudioBeamFunc(IntPtr self, out IntPtr audioBeam);
        get_AudioBeamFunc m_get_AudioBeamFunc;

        public virtual int get_SubFrameCount(
            out uint pSubFrameCount
        ){
            var fp = GetFunctionPointer(6);
            if(m_get_SubFrameCountFunc==null) m_get_SubFrameCountFunc = (get_SubFrameCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_SubFrameCountFunc));
            
            return m_get_SubFrameCountFunc(m_ptr, out pSubFrameCount);
        }
        delegate int get_SubFrameCountFunc(IntPtr self, out uint pSubFrameCount);
        get_SubFrameCountFunc m_get_SubFrameCountFunc;

        public virtual int GetSubFrame(
            uint subFrameIndex,
            out IAudioBeamSubFrame audioBeamSubFrame
        ){
            var fp = GetFunctionPointer(7);
            if(m_GetSubFrameFunc==null) m_GetSubFrameFunc = (GetSubFrameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSubFrameFunc));
            audioBeamSubFrame = new IAudioBeamSubFrame();
            return m_GetSubFrameFunc(m_ptr, subFrameIndex, out audioBeamSubFrame.PtrForNew);
        }
        delegate int GetSubFrameFunc(IntPtr self, uint subFrameIndex, out IntPtr audioBeamSubFrame);
        GetSubFrameFunc m_GetSubFrameFunc;

        public virtual int get_RelativeTimeStart(
            out long relativeTime
        ){
            var fp = GetFunctionPointer(8);
            if(m_get_RelativeTimeStartFunc==null) m_get_RelativeTimeStartFunc = (get_RelativeTimeStartFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_RelativeTimeStartFunc));
            
            return m_get_RelativeTimeStartFunc(m_ptr, out relativeTime);
        }
        delegate int get_RelativeTimeStartFunc(IntPtr self, out long relativeTime);
        get_RelativeTimeStartFunc m_get_RelativeTimeStartFunc;

    }
}
